{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","chosenItem","setChosenItem","getColorArray","colors","colorArray","length","chosenIndex","Math","floor","random","push","splice","defaultItems","map","item","index","id","color","opened","visible","items","setItems","openColor","prev","elem","setTimeout","colorPrev","filter","colorCurrent","hidenItem","newState","every","newItems","className","onClick","bind","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPA2FeA,MAjFf,WAEE,MAAoCC,oBAAkB,GAAtD,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAgB,WACpB,IAAIC,EAAmB,CAAC,QAAS,MAAO,SAAU,OAAQ,cAAe,SAAU,UAAW,SAC9FA,EAAM,sBAAOA,GAAP,YAAkBA,IAExB,IADA,IAAIC,EAAuB,GACpBD,EAAOE,OAAS,GAAG,CACtB,IAAMC,EAAsBC,KAAKC,MAAMD,KAAKE,SAAWN,EAAOE,QAC9DD,EAAWM,KAAKP,EAAOG,IACvBH,EAAOQ,OAAOL,EAAa,GAE/B,OAAOF,GAKHQ,EADuBV,IACWW,KAAI,SAACC,EAAMC,GACjD,MAAO,CAACC,GAAID,EAAOE,MAAOH,EAAMI,QAAQ,EAAOC,SAAS,MAE1D,EAA0BpB,mBAAiBa,GAA3C,mBAAOQ,EAAP,KAAcC,EAAd,KAEMC,EAAY,SAACN,GAEjBK,GAAS,SAACE,GAAD,OAAkBA,EAAKV,KAAI,SAACW,GACnC,OAAIA,EAAKR,KAAOA,EAAWQ,EACtB,2BAAWA,GAAX,IAAiBN,QAAQ,UAG5BlB,EAAa,EACfC,EAAce,IAGVhB,IAAegB,GAEjBS,YAAW,WACTJ,GAAS,SAACE,GACR,IAAMG,EAAoBH,EAAKI,QAAO,SAAAH,GAAI,OAAIA,EAAKR,KAAOhB,KACpD4B,EAAuBL,EAAKI,QAAO,SAAAH,GAAI,OAAIA,EAAKR,KAAOA,KACvDa,EAAqBH,EAAU,GAAGT,QAAUW,EAAa,GAAGX,MAC9Da,EAAmBP,EAAKV,KAAI,SAACW,GAC/B,OAAIA,EAAKR,KAAOA,GAAMQ,EAAKR,KAAOhB,EACzBwB,EACAK,EACA,2BAAIL,GAAX,IAAiBL,SAAS,IACvB,2BAAWK,GAAX,IAAiBN,QAAQ,OAEhC,GAAIY,EAASC,OAAM,SAACP,GAAD,OAAiC,IAAjBA,EAAKL,WAAoB,CAE1D,IACMa,EADqB9B,IACOW,KAAI,SAACC,EAAMC,GAC3C,MAAO,CAACC,GAAID,EAAOE,MAAOH,EAAMI,QAAQ,EAAOC,SAAS,MAE1DW,EAAQ,YAAOE,GAEjB,OAAOF,OAGR,KAGL7B,GAAe,KAKnB,OACE,qBAAKgC,UAAU,MAAf,SACGb,EAAMP,KAAI,SAACW,GAAD,OACR,qBAAKS,UAAS,+BACFT,EAAKN,OAAS,SAASM,EAAKP,MAAQ,aADlC,qBAEbO,EAAKL,QAAU,GAAK,eAFP,cAKfe,QAASZ,EAAUa,KAAK,KAAMX,EAAKR,KAD9BQ,EAAKR,UCtEHoB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.daa2cdf5.chunk.js","sourcesContent":["import { useState } from 'react'\nimport './App.css'\n\ninterface Item {\n  id: number,\n  color: string,\n  opened: boolean,\n  visible: boolean\n}\n\nfunction App() {\n\n  const [chosenItem, setChosenItem] = useState<number>(-1)\n\n  const getColorArray = () => {\n    let colors: string[] = ['green', 'red', 'yellow', 'blue', 'greenyellow', 'orange', 'magenta', 'olive']\n    colors = [...colors, ...colors]\n    let colorArray: string[] = []\n    while (colors.length > 0) {\n        const chosenIndex: number = Math.floor(Math.random() * colors.length)\n        colorArray.push(colors[chosenIndex])\n        colors.splice(chosenIndex, 1)\n    }\n    return colorArray\n  }\n\n\n  const colorArray: string[] = getColorArray()\n  const defaultItems: Item[] = colorArray.map((item, index) => {\n    return {id: index, color: item, opened: false, visible: true}\n  })\n  const [items, setItems] = useState<Item[]>(defaultItems)\n\n  const openColor = (id: number) => {\n    \n    setItems((prev: Item[]) => prev.map((elem: Item) => {\n      if (elem.id !== id) return elem\n      else return {...elem, opened: true}\n    }))    \n\n    if (chosenItem < 0) {\n      setChosenItem(id)\n    } else {\n      \n      if (chosenItem !== id) {\n\n        setTimeout(() => {\n          setItems((prev: Item[]) => {\n            const colorPrev: Item[] = prev.filter(elem => elem.id === chosenItem)\n            const colorCurrent: Item[] = prev.filter(elem => elem.id === id)\n            const hidenItem: boolean = colorPrev[0].color === colorCurrent[0].color ? true : false\n            let newState: Item[] = prev.map((elem: Item) => {\n              if (elem.id !== id && elem.id !== chosenItem) \n                return elem\n              else if (hidenItem) \n                return {...elem, visible: false} \n              else return {...elem, opened: false}                        \n            })\n            if (newState.every((elem: Item) => elem.visible === false)) {\n              \n              const newArray: string[] = getColorArray()\n              const newItems: Item[] = newArray.map((item, index) => {\n                return {id: index, color: item, opened: false, visible: true}\n              })\n              newState = [...newItems]\n            }\n            return newState\n          })\n\n        }, 500)\n      }\n          \n      setChosenItem(-1)\n    }\n\n  }\n\n  return (\n    <div className=\"App\">\n      {items.map((elem: Item) => \n        (<div className={`\n        color-item ${elem.opened ? 'color-'+elem.color : 'color-gray'}\n        ${elem.visible ? '' : ' item-hidden'}\n        `}\n        key={elem.id}\n        onClick={openColor.bind(null, elem.id)}></div>\n      ))}\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}